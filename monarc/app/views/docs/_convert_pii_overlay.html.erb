
<% cache render_async_cache_key(request.path), :skip_digest => true do
	def checkEmpty(theString)
		# -'s mean it was withdrawn in 1253 Rev 3.
		if (theString == nil) || (theString == "") || (theString == "-") || (theString == " ")
			theString = nil
		end
		return theString	
		  
	end
 
 %>
	<%= button_to 'All Docs', docs_path, method: :get  %><br>
	<% require 'open-uri' %>
	<%
	@doc.imported = Time.current
	@doc.save
	path = @doc.grab_file_path
	the_policy = @doc.security_policy
	version = the_policy.version
	policy_name = the_policy.name
	
	provider = Provider.find_or_create_by(name: "ODNI")
	overlay = Overlay.find_or_create_by(name: "ODNI PII Overlay", provider: provider)
	overlay_level = OverlayField.find_or_create_by(overlay: overlay, name: "Level" )
	
	pii_l_field = OverlayFieldOption.set_overlay_option(overlay_level, "PII-L")
	pii_m_field = OverlayFieldOption.set_overlay_option(overlay_level, "PII-M")
	pii_h_field = OverlayFieldOption.set_overlay_option(overlay_level, "PII-H")
	

	data = IO.binread(path)
	data = data.encode(Encoding.find('UTF-8'), {invalid: :replace, undef: :replace, replace: ''})
	controls = data.split "\r\n"
	controls.each do |control|
		parts = control.split ","
		%> control - <%= control %> <br> <%
	 	control_ID = parts[0]
	 	control_ID = control_ID.gsub ",", ""
	 	control_ID = control_ID.gsub "(", " ("
	 	the_control = SecurityControl.where(name: control_ID, security_policy:  the_policy).first

	 	if (the_control != nil)
	 		%> Found the_control : <%= the_control.control_id %> <br><%  
		 	pii_l_value = checkEmpty(parts[1])
		 	pii_m_value = checkEmpty(parts[2])
		 	pii_h_value = checkEmpty(parts[3])
		 	
		 			 	
		 	ControlOverlay.set_control_overlay(the_control, the_policy, overlay_level, pii_l_value, pii_l_field)
		 	ControlOverlay.set_control_overlay(the_control, the_policy, overlay_level, pii_m_value, pii_m_field)
		 	ControlOverlay.set_control_overlay(the_control, the_policy, overlay_level, pii_h_value, pii_h_field)
		 	
		 	
		end
	 end
	
end %>