
<% cache render_async_cache_key(request.path), :skip_digest => true do
	def checkEmpty(theString)
		# -'s mean it was withdrawn in 1253 Rev 3.
		if (theString == nil) || (theString == "") || (theString == "-") || (theString == " ")
			theString = nil
		end
		return theString	
		  
	end
 
 %>
	<%= button_to 'All Docs', docs_path, method: :get  %><br>
	<% require 'open-uri' %>
	<%
	@doc.imported = Time.current
	@doc.save
	path = @doc.grab_file_path
	the_file = File.read(path) 
	
	the_policy = @doc.security_policy
	version = the_policy.version
	policy_name = the_policy.name
	
	#I keep these here, so if someone runs this before nist's it will have the nist on top.
	old_provider = Provider.find_or_create_by(name: "NIST")
	old_overlay = Overlay.find_or_create_by(name: "FISMA", provider: old_provider)
	old_nist_impact_level = OverlayField.find_or_create_by(overlay: old_overlay, name: "Baseline" )
	  
	provider = Provider.find_or_create_by(name: "CNSS")
	overlay = Overlay.find_or_create_by(name: "CNSS 1253", provider: provider)
	confidentiality = OverlayField.find_or_create_by(overlay: overlay, name: "Confidentiality" )
	integrity = OverlayField.find_or_create_by(overlay: overlay, name: "Integrity" )
	availability = OverlayField.find_or_create_by(overlay: overlay, name: "Availability" )
	
	c_low_field_option = OverlayFieldOption.set_overlay_option(confidentiality, "Low")
	c_mod_field_option = OverlayFieldOption.set_overlay_option(confidentiality, "Moderate")
	c_high_field_option = OverlayFieldOption.set_overlay_option(confidentiality, "High")

	i_low_field_option = OverlayFieldOption.set_overlay_option(integrity, "Low")
	i_mod_field_option = OverlayFieldOption.set_overlay_option(integrity, "Moderate")
	i_high_field_option = OverlayFieldOption.set_overlay_option(integrity, "High")
	
	a_low_field_option = OverlayFieldOption.set_overlay_option(availability, "Low")
	a_mod_field_option = OverlayFieldOption.set_overlay_option(availability, "Moderate")
	a_high_field_option = OverlayFieldOption.set_overlay_option(availability, "High")


	data = IO.binread(path)
	data = data.encode(Encoding.find('UTF-8'), {invalid: :replace, undef: :replace, replace: ''})
	controls = data.split "Control-ID"
	controls.each do |control|
		if !(control.include? "Withdrawn")

			parts = control.split " ,"
		 	offset = 0
		 	
			%> control - <%= control %> <br> <%
		 	
		 	
		 	if (parts.size <7)
		 		parts = control.split ","
		 		offset = 1
		 	end
		 	
		 	
		 	 if (parts[10] != nil) && (parts[10] != "CH") && (parts[2] != "Withdrawn")
		 		
			 	control_ID = parts[0 + offset]
			 	control_ID = control_ID.gsub ",", ""
			 	control_ID = control_ID.gsub "(", " ("
			 	
			 	the_control = SecurityControl.where(name: control_ID, security_policy:  the_policy).first
			 	if (the_control != nil) 
				 	
				 	c_low = checkEmpty(parts[1 + offset])
				 	c_mod = checkEmpty(parts[2 + offset])
				 	c_high = checkEmpty(parts[3 + offset])
				 	i_low = checkEmpty(parts[4 + offset])
				 	i_mod = checkEmpty(parts[5 + offset])
				 	i_high = checkEmpty(parts[6 + offset])
				 	a_low = checkEmpty(parts[7 + offset])
				 	a_mod = checkEmpty(parts[8 + offset])
				 	a_high = checkEmpty(parts[9 + offset])
				 	
				 	cl = ControlOverlay.set_control_overlay(the_control, the_policy, confidentiality, c_low, c_low_field_option)
				 	cm = ControlOverlay.set_control_overlay(the_control, the_policy, confidentiality, c_mod, c_mod_field_option)
				 	ch = ControlOverlay.set_control_overlay(the_control, the_policy, confidentiality, c_high, c_high_field_option)
				 	il = ControlOverlay.set_control_overlay(the_control, the_policy, integrity, i_low, i_low_field_option)
				 	im = ControlOverlay.set_control_overlay(the_control, the_policy, integrity, i_mod, i_mod_field_option)
				 	ih = ControlOverlay.set_control_overlay(the_control, the_policy, integrity, i_high, i_high_field_option)
				 	ControlOverlay.set_control_overlay(the_control, the_policy, availability, a_low, a_low_field_option)
				 	ControlOverlay.set_control_overlay(the_control, the_policy, availability, a_mod, a_mod_field_option)
				 	ControlOverlay.set_control_overlay(the_control, the_policy, availability, a_high, a_high_field_option)
				end
			end
	 	end
	 end
	 
	 
	
end %>